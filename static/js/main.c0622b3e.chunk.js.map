{"version":3,"sources":["utils/fetchClient.ts","PostsContext.tsx","api/users.ts","api/posts.ts","api/comments.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","hooks/useOutsideClick.ts","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsContext","React","createContext","PostsProvider","children","useState","allUsers","setAllUsers","selectedUser","setSelectedUser","posts","setPosts","arePostsLoading","setArePostsLoading","isPostsLoadingError","setIsPostsLoadingError","selectedPost","setSelectedPost","comments","setComments","areCommentsLoading","setAreCommentsLoading","isCommentsLoadingError","setIsCommentsLoadingError","isWritingComment","setIsWritingComment","useEffect","userId","id","catch","finally","postId","value","Provider","PostsList","useContext","className","map","post","title","type","classNames","onClick","handleSelectPost","Loader","NewCommentForm","name","setName","isNameError","setIsNameError","email","setEmail","isEmailError","setIsEmailError","setBody","isBodyError","setIsBodyError","isAddingComment","setIsAddingComment","handleFormSubmit","event","preventDefault","trim","newComment","prevComments","onSubmit","htmlFor","onChange","newName","target","placeholder","newEmail","newBody","PostDetails","isNoComments","length","isNewCommentBtn","handleCommentDelete","comment","commentId","currComments","filter","item","href","UserSelector","isDropdownShown","setIsDropdownShown","dropdownRef","callback","ref","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","useOutsideClick","prevIsShown","role","user","handleSelect","App","areNoPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c0622b3e.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, {\n  Dispatch,\n  useState,\n  useEffect,\n} from 'react';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { Post, Comment } from './types';\nimport { getComments } from './api/comments';\n\ntype Context = {\n  allUsers: User[],\n  selectedUser: User | null,\n  setSelectedUser: Dispatch<React.SetStateAction<User | null>>,\n  arePostsLoading: boolean,\n  posts: Post[],\n  isPostsLoadingError: boolean,\n  selectedPost: Post | null,\n  setSelectedPost: Dispatch<React.SetStateAction<Post | null>>,\n  comments: Comment[],\n  setComments: Dispatch<React.SetStateAction<Comment[]>>\n  areCommentsLoading: boolean,\n  isCommentsLoadingError: boolean,\n  isWritingComment: boolean,\n  setIsWritingComment: Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostsContext = React.createContext({} as Context);\n\ntype Props = {\n  children: React.ReactNode,\n};\n\nexport const PostsProvider: React.FC<Props> = ({ children }) => {\n  const [allUsers, setAllUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [arePostsLoading, setArePostsLoading] = useState(false);\n  const [isPostsLoadingError, setIsPostsLoadingError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [areCommentsLoading, setAreCommentsLoading] = useState(false);\n  const [isCommentsLoadingError, setIsCommentsLoadingError] = useState(false);\n  const [isWritingComment, setIsWritingComment] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setAllUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser?.id) {\n      setPosts([]);\n      setArePostsLoading(true);\n      setIsPostsLoadingError(false);\n\n      getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => {\n          setIsPostsLoadingError(true);\n        })\n        .finally(() => {\n          setArePostsLoading(false);\n        });\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    if (selectedPost?.id) {\n      setIsWritingComment(false);\n      setComments([]);\n      setAreCommentsLoading(true);\n      setIsCommentsLoadingError(false);\n\n      getComments(selectedPost.id)\n        .then(setComments)\n        .catch(() => {\n          setIsCommentsLoadingError(true);\n        })\n        .finally(() => {\n          setAreCommentsLoading(false);\n        });\n    }\n  }, [selectedPost]);\n\n  const value: Context = {\n    allUsers,\n    selectedUser,\n    setSelectedUser,\n    arePostsLoading,\n    posts,\n    isPostsLoadingError,\n    selectedPost,\n    setSelectedPost,\n    comments,\n    setComments,\n    areCommentsLoading,\n    isCommentsLoadingError,\n    isWritingComment,\n    setIsWritingComment,\n  };\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = (): Promise<User[]> => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number): Promise<Post[]> => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number): Promise<Comment[]> => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (data: Omit<Comment, 'id'>): Promise<Comment> => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\n\nimport { PostsContext } from '../PostsContext';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const { posts, selectedPost, setSelectedPost } = useContext(PostsContext);\n\n  const handleSelectPost = (post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => handleSelectPost(post)}\n                >\n                  {selectedPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { postComment } from '../api/comments';\nimport { PostsContext } from '../PostsContext';\n\nexport const NewCommentForm: React.FC = () => {\n  const [name, setName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [body, setBody] = useState('');\n  const [isBodyError, setIsBodyError] = useState(false);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const { selectedPost, setComments } = useContext(PostsContext);\n\n  const handleNameChange = (newName: string) => {\n    setIsNameError(false);\n    setName(newName);\n  };\n\n  const handleEmailChange = (newEmail: string) => {\n    setIsEmailError(false);\n    setEmail(newEmail);\n  };\n\n  const handleBodyChange = (newBody: string) => {\n    setIsBodyError(false);\n    setBody(newBody);\n  };\n\n  const handleReset = () => {\n    setName('');\n    setIsNameError(false);\n    setEmail('');\n    setIsEmailError(false);\n    setBody('');\n    setIsBodyError(false);\n    setIsAddingComment(false);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsNameError(!name.trim());\n    setIsEmailError(!email.trim());\n    setIsBodyError(!body.trim());\n\n    if (!name.trim() || !email.trim() || !body.trim()) {\n      return;\n    }\n\n    setIsAddingComment(true);\n\n    postComment({\n      name,\n      email,\n      body,\n      postId: selectedPost?.id as number,\n    })\n      .then((newComment) => {\n        setComments(prevComments => [...prevComments, newComment]);\n        setBody('');\n        setIsAddingComment(false);\n      });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => handleFormSubmit(event)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={event => handleNameChange(event.target.value)}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isNameError,\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            onChange={event => handleEmailChange(event.target.value)}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmailError,\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            onChange={event => handleBodyChange(event.target.value)}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isBodyError,\n            })}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isAddingComment,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { PostsContext } from '../PostsContext';\nimport { deleteComment } from '../api/comments';\nimport { Comment } from '../types';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    selectedPost,\n    areCommentsLoading,\n    isCommentsLoadingError,\n    comments,\n    setComments,\n    isWritingComment,\n    setIsWritingComment,\n  } = useContext(PostsContext);\n\n  const isNoComments = selectedPost\n    && !areCommentsLoading\n    && !isCommentsLoadingError\n    && comments.length === 0;\n\n  const isNewCommentBtn = !areCommentsLoading\n    && !isWritingComment\n    && !isCommentsLoadingError;\n\n  const handleCommentDelete = (comment: Comment) => {\n    const prevComments = comments;\n\n    setComments(currComments => currComments.filter(\n      item => item.id !== comment.id,\n    ));\n\n    deleteComment(comment.id)\n      .catch(() => {\n        setComments(prevComments);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {areCommentsLoading && <Loader />}\n\n          {isCommentsLoadingError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {isNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleCommentDelete(comment)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {isNewCommentBtn && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWritingComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWritingComment && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { PostsContext } from '../PostsContext';\nimport { useOutsideClick } from '../hooks/useOutsideClick';\nimport { User } from '../types/User';\n\nexport const UserSelector: React.FC = () => {\n  const [isDropdownShown, setIsDropdownShown] = useState(false);\n  const {\n    allUsers,\n    selectedUser,\n    setSelectedUser,\n    setSelectedPost,\n  } = useContext(PostsContext);\n\n  const dropdownRef = useOutsideClick(() => {\n    setIsDropdownShown(false);\n  });\n\n  const toggleDropdown = () => {\n    setIsDropdownShown(prevIsShown => !prevIsShown);\n  };\n\n  const handleSelect = (user: User): void => {\n    setSelectedUser(user);\n    setIsDropdownShown(false);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropdownShown,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropdown}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n        ref={dropdownRef}\n      >\n        <div className=\"dropdown-content\">\n          {allUsers.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onClick={() => handleSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport const useOutsideClick = (callback: () => void) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        callback();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [callback]);\n\n  return ref;\n};\n","import React, { useContext } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsContext } from './PostsContext';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const {\n    selectedUser,\n    arePostsLoading,\n    isPostsLoadingError,\n    posts,\n    selectedPost,\n  } = useContext(PostsContext);\n\n  const areNoPosts = selectedUser\n    && posts.length === 0\n    && !arePostsLoading\n    && !isPostsLoadingError;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {arePostsLoading && <Loader />}\n\n                {isPostsLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {areNoPosts && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && <PostsList />}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { PostsProvider } from './PostsContext';\nimport { App } from './App';\n\nReactDOM.render(\n  <PostsProvider>\n    <App />\n  </PostsProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}